# Byte-compiled / optimized / DLL files
d_learner_back/__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
d_learner_back/build/
d_learner_back/develop-eggs/
d_learner_back/dist/
d_learner_back/downloads/
d_learner_back/eggs/
d_learner_back/.eggs/
d_learner_back/lib/
d_learner_back/lib64/
d_learner_back/parts/
d_learner_back/sdist/
d_learner_back/var/
d_learner_back/wheels/
d_learner_back/share/python-wheels/
d_learner_back/*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
d_learner_back/htmlcov/
d_learner_back/.tox/
d_learner_back/.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
d_learner_back/.hypothesis/
d_learner_back/.pytest_cache/
d_learner_back/cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
d_learner_back/instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
d_learner_back/docs/_build/

# PyBuilder
d_learner_back/.pybuilder/
d_learner_back/target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
d_learner_back/profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
d_learner_back/__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
d_learner_back/env/
d_learner_back/venv/
d_learner_back/ENV/
d_learner_back/env.bak/
d_learner_back/venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
d_learner_back/site

# mypy
d_learner_back/.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
d_learner_back/.pyre/

# pytype static type analyzer
d_learner_back/.pytype/

# Cython debug symbols
d_learner_back/cython_debug/

# PyCharm
d_learner_back/.idea/